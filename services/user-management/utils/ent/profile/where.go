// Code generated by ent, DO NOT EDIT.

package profile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Ali-Gorgani/chat-room-project/services/user-management/utils/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldID, id))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldLastName, v))
}

// ProfilePicture applies equality check predicate on the "profile_picture" field. It's identical to ProfilePictureEQ.
func ProfilePicture(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldProfilePicture, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameIsNil applies the IsNil predicate on the "first_name" field.
func FirstNameIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldFirstName))
}

// FirstNameNotNil applies the NotNil predicate on the "first_name" field.
func FirstNameNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldFirstName))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameIsNil applies the IsNil predicate on the "last_name" field.
func LastNameIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldLastName))
}

// LastNameNotNil applies the NotNil predicate on the "last_name" field.
func LastNameNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldLastName))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldLastName, v))
}

// ProfilePictureEQ applies the EQ predicate on the "profile_picture" field.
func ProfilePictureEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldProfilePicture, v))
}

// ProfilePictureNEQ applies the NEQ predicate on the "profile_picture" field.
func ProfilePictureNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldProfilePicture, v))
}

// ProfilePictureIn applies the In predicate on the "profile_picture" field.
func ProfilePictureIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldProfilePicture, vs...))
}

// ProfilePictureNotIn applies the NotIn predicate on the "profile_picture" field.
func ProfilePictureNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldProfilePicture, vs...))
}

// ProfilePictureGT applies the GT predicate on the "profile_picture" field.
func ProfilePictureGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldProfilePicture, v))
}

// ProfilePictureGTE applies the GTE predicate on the "profile_picture" field.
func ProfilePictureGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldProfilePicture, v))
}

// ProfilePictureLT applies the LT predicate on the "profile_picture" field.
func ProfilePictureLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldProfilePicture, v))
}

// ProfilePictureLTE applies the LTE predicate on the "profile_picture" field.
func ProfilePictureLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldProfilePicture, v))
}

// ProfilePictureContains applies the Contains predicate on the "profile_picture" field.
func ProfilePictureContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldProfilePicture, v))
}

// ProfilePictureHasPrefix applies the HasPrefix predicate on the "profile_picture" field.
func ProfilePictureHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldProfilePicture, v))
}

// ProfilePictureHasSuffix applies the HasSuffix predicate on the "profile_picture" field.
func ProfilePictureHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldProfilePicture, v))
}

// ProfilePictureIsNil applies the IsNil predicate on the "profile_picture" field.
func ProfilePictureIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldProfilePicture))
}

// ProfilePictureNotNil applies the NotNil predicate on the "profile_picture" field.
func ProfilePictureNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldProfilePicture))
}

// ProfilePictureEqualFold applies the EqualFold predicate on the "profile_picture" field.
func ProfilePictureEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldProfilePicture, v))
}

// ProfilePictureContainsFold applies the ContainsFold predicate on the "profile_picture" field.
func ProfilePictureContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldProfilePicture, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Profile) predicate.Profile {
	return predicate.Profile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Profile) predicate.Profile {
	return predicate.Profile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Profile) predicate.Profile {
	return predicate.Profile(sql.NotPredicates(p))
}
